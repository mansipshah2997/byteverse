version: 0.0.5
jobId: "284"
jobName: ReadCSVPySpark_Vishnu copy copy copy
jobType: DataSets
alias: StateManagementCSV
discoveryPort:
  name: ReadCSVPySpark_Vishnu copy copy copy
inputPorts:
  - alias: Delimited_1
    isDynamic: true
    path: s3://byte-etl-externaldemo/weather_data/20230626103841.csv
    optional:
      persistDataFrame: false
      jsonSchema: '{"sd":"1"}'
      enableDataReconciliation: false
      enforceSchema: false
      dataSetUrn: ""
    type: inputDelimited
    dataProductUrn: ""
productState:
  persistDataFrame: false
  enableDataReconciliation: false
  enforceSchema: false
  stepName: StateManagementCSV
  path: s3://byte-etl-externaldemo/custom_pyspark_output/weather_data_daily_test.csv
  type: inputDelimited
  isStateManagement: true
  sequence: 3
  alias: StateManagementCSV
  refreshInterval: None
  retentionVersions: ""
  logicalSchema: 
      properties:
        City: STRING
        Region: STRING
  enforceSchemaMethod: ""
  isProfilingEnabled: false
transformation:
  - alias: EMR_PySpark_1
    arguments:
      - s3://byte-etl-externaldemo/weather_data/20230626103841.csv
    pythonFilePath: s3://bp-spark-sql-library-test-acc/custom-jobs/CustomPythonJobWriteParquetTimeOut.py
    optional:
      pythonEnvTarGZPath: s3://byte-etl-externaldemo/pyspark_serverless_test/pyspark_venv.tar.gz
      sparkExtraConf:
        spark.sql.legacy.timeParserPolicy: LEGACY
        spark.sql.parquet.datetimeRebaseModeInRead: LEGACY
    type: customPySparkEMRServerless
    sequence: 2
    references:
      - alias: Delimited_1
        sqlReference: ""
controlPort:
  dataQualityRules: {}
outputPort:
  subscriptionChannels:
    - channelType: Postgres
      queryType: SQL
    - channelType: Dataproduct
      queryType: SQL
